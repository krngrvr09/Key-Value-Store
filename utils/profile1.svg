<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="394" onload="init(evt)" viewBox="0 0 1200 394" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="394" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o profile1.svg -p 9836</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="383.00"> </text><svg id="frames" x="10" width="1180" total_samples="148"><g><title>serve_forever (socketserver.py:231) (1 samples, 0.68%)</title><rect x="0.0000%" y="100" width="0.6757%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="110.50"></text></g><g><title>serve_forever (socketserver.py:232) (1 samples, 0.68%)</title><rect x="0.6757%" y="100" width="0.6757%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.9257%" y="110.50"></text></g><g><title>select (selectors.py:426) (1 samples, 0.68%)</title><rect x="0.6757%" y="116" width="0.6757%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.9257%" y="126.50"></text></g><g><title>_key_from_fd (selectors.py:286) (1 samples, 0.68%)</title><rect x="0.6757%" y="132" width="0.6757%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.9257%" y="142.50"></text></g><g><title>serve_forever (socketserver.py:234) (1 samples, 0.68%)</title><rect x="1.3514%" y="100" width="0.6757%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="1.6014%" y="110.50"></text></g><g><title>accept (socket.py:293) (9 samples, 6.08%)</title><rect x="2.0270%" y="148" width="6.0811%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="9"/><text x="2.2770%" y="158.50">accept (..</text></g><g><title>__init__ (socket.py:232) (4 samples, 2.70%)</title><rect x="8.7838%" y="164" width="2.7027%" height="15" fill="rgb(207,160,47)" fg:x="13" fg:w="4"/><text x="9.0338%" y="174.50">__..</text></g><g><title>family (socket.py:518) (3 samples, 2.03%)</title><rect x="11.4865%" y="164" width="2.0270%" height="15" fill="rgb(228,23,34)" fg:x="17" fg:w="3"/><text x="11.7365%" y="174.50">f..</text></g><g><title>_intenum_converter (socket.py:105) (1 samples, 0.68%)</title><rect x="12.8378%" y="180" width="0.6757%" height="15" fill="rgb(218,30,26)" fg:x="19" fg:w="1"/><text x="13.0878%" y="190.50"></text></g><g><title>accept (socket.py:294) (9 samples, 6.08%)</title><rect x="8.1081%" y="148" width="6.0811%" height="15" fill="rgb(220,122,19)" fg:x="12" fg:w="9"/><text x="8.3581%" y="158.50">accept (..</text></g><g><title>type (socket.py:524) (1 samples, 0.68%)</title><rect x="13.5135%" y="164" width="0.6757%" height="15" fill="rgb(250,228,42)" fg:x="20" fg:w="1"/><text x="13.7635%" y="174.50"></text></g><g><title>_handle_request_noblock (socketserver.py:311) (19 samples, 12.84%)</title><rect x="2.0270%" y="116" width="12.8378%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="19"/><text x="2.2770%" y="126.50">_handle_request_nob..</text></g><g><title>get_request (socketserver.py:499) (19 samples, 12.84%)</title><rect x="2.0270%" y="132" width="12.8378%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="19"/><text x="2.2770%" y="142.50">get_request (socket..</text></g><g><title>accept (socket.py:298) (1 samples, 0.68%)</title><rect x="14.1892%" y="148" width="0.6757%" height="15" fill="rgb(206,188,39)" fg:x="21" fg:w="1"/><text x="14.4392%" y="158.50"></text></g><g><title>makefile (socket.py:310) (1 samples, 0.68%)</title><rect x="15.5405%" y="196" width="0.6757%" height="15" fill="rgb(217,207,13)" fg:x="23" fg:w="1"/><text x="15.7905%" y="206.50"></text></g><g><title>makefile (socket.py:321) (1 samples, 0.68%)</title><rect x="16.2162%" y="196" width="0.6757%" height="15" fill="rgb(231,73,38)" fg:x="24" fg:w="1"/><text x="16.4662%" y="206.50"></text></g><g><title>__init__ (socket.py:689) (1 samples, 0.68%)</title><rect x="16.2162%" y="212" width="0.6757%" height="15" fill="rgb(225,20,46)" fg:x="24" fg:w="1"/><text x="16.4662%" y="222.50"></text></g><g><title>makefile (socket.py:326) (1 samples, 0.68%)</title><rect x="16.8919%" y="196" width="0.6757%" height="15" fill="rgb(210,31,41)" fg:x="25" fg:w="1"/><text x="17.1419%" y="206.50"></text></g><g><title>__init__ (socketserver.py:745) (5 samples, 3.38%)</title><rect x="15.5405%" y="164" width="3.3784%" height="15" fill="rgb(221,200,47)" fg:x="23" fg:w="5"/><text x="15.7905%" y="174.50">__i..</text></g><g><title>setup (socketserver.py:797) (5 samples, 3.38%)</title><rect x="15.5405%" y="180" width="3.3784%" height="15" fill="rgb(226,26,5)" fg:x="23" fg:w="5"/><text x="15.7905%" y="190.50">set..</text></g><g><title>makefile (socket.py:334) (2 samples, 1.35%)</title><rect x="17.5676%" y="196" width="1.3514%" height="15" fill="rgb(249,33,26)" fg:x="26" fg:w="2"/><text x="17.8176%" y="206.50"></text></g><g><title>handle (http/server.py:430) (1 samples, 0.68%)</title><rect x="18.9189%" y="180" width="0.6757%" height="15" fill="rgb(235,183,28)" fg:x="28" fg:w="1"/><text x="19.1689%" y="190.50"></text></g><g><title>readinto (socket.py:699) (1 samples, 0.68%)</title><rect x="19.5946%" y="212" width="0.6757%" height="15" fill="rgb(221,5,38)" fg:x="29" fg:w="1"/><text x="19.8446%" y="222.50"></text></g><g><title>handle_one_request (http/server.py:400) (12 samples, 8.11%)</title><rect x="19.5946%" y="196" width="8.1081%" height="15" fill="rgb(247,18,42)" fg:x="29" fg:w="12"/><text x="19.8446%" y="206.50">handle_one_..</text></g><g><title>readinto (socket.py:705) (11 samples, 7.43%)</title><rect x="20.2703%" y="212" width="7.4324%" height="15" fill="rgb(241,131,45)" fg:x="30" fg:w="11"/><text x="20.5203%" y="222.50">readinto (..</text></g><g><title>parse_request (http/server.py:282) (1 samples, 0.68%)</title><rect x="27.7027%" y="212" width="0.6757%" height="15" fill="rgb(249,31,29)" fg:x="41" fg:w="1"/><text x="27.9527%" y="222.50"></text></g><g><title>_read_headers (http/client.py:212) (1 samples, 0.68%)</title><rect x="28.3784%" y="244" width="0.6757%" height="15" fill="rgb(225,111,53)" fg:x="42" fg:w="1"/><text x="28.6284%" y="254.50"></text></g><g><title>_read_headers (http/client.py:214) (2 samples, 1.35%)</title><rect x="29.0541%" y="244" width="1.3514%" height="15" fill="rgb(238,160,17)" fg:x="43" fg:w="2"/><text x="29.3041%" y="254.50"></text></g><g><title>parse_headers (http/client.py:234) (4 samples, 2.70%)</title><rect x="28.3784%" y="228" width="2.7027%" height="15" fill="rgb(214,148,48)" fg:x="42" fg:w="4"/><text x="28.6284%" y="238.50">pa..</text></g><g><title>_read_headers (http/client.py:220) (1 samples, 0.68%)</title><rect x="30.4054%" y="244" width="0.6757%" height="15" fill="rgb(232,36,49)" fg:x="45" fg:w="1"/><text x="30.6554%" y="254.50"></text></g><g><title>__init__ (email/feedparser.py:158) (2 samples, 1.35%)</title><rect x="33.7838%" y="276" width="1.3514%" height="15" fill="rgb(209,103,24)" fg:x="50" fg:w="2"/><text x="34.0338%" y="286.50"></text></g><g><title>__init__ (email/message.py:122) (1 samples, 0.68%)</title><rect x="34.4595%" y="292" width="0.6757%" height="15" fill="rgb(229,88,8)" fg:x="51" fg:w="1"/><text x="34.7095%" y="302.50"></text></g><g><title>parse (email/parser.py:49) (6 samples, 4.05%)</title><rect x="33.7838%" y="260" width="4.0541%" height="15" fill="rgb(213,181,19)" fg:x="50" fg:w="6"/><text x="34.0338%" y="270.50">pars..</text></g><g><title>__init__ (email/feedparser.py:162) (4 samples, 2.70%)</title><rect x="35.1351%" y="276" width="2.7027%" height="15" fill="rgb(254,191,54)" fg:x="52" fg:w="4"/><text x="35.3851%" y="286.50">__..</text></g><g><title>__init__ (email/feedparser.py:56) (3 samples, 2.03%)</title><rect x="35.8108%" y="292" width="2.0270%" height="15" fill="rgb(241,83,37)" fg:x="53" fg:w="3"/><text x="36.0608%" y="302.50">_..</text></g><g><title>feed (email/feedparser.py:175) (2 samples, 1.35%)</title><rect x="38.5135%" y="276" width="1.3514%" height="15" fill="rgb(233,36,39)" fg:x="57" fg:w="2"/><text x="38.7635%" y="286.50"></text></g><g><title>push (email/feedparser.py:110) (2 samples, 1.35%)</title><rect x="38.5135%" y="292" width="1.3514%" height="15" fill="rgb(226,3,54)" fg:x="57" fg:w="2"/><text x="38.7635%" y="302.50"></text></g><g><title>_parsegen (email/feedparser.py:220) (1 samples, 0.68%)</title><rect x="39.8649%" y="308" width="0.6757%" height="15" fill="rgb(245,192,40)" fg:x="59" fg:w="1"/><text x="40.1149%" y="318.50"></text></g><g><title>_parsegen (email/feedparser.py:228) (3 samples, 2.03%)</title><rect x="40.5405%" y="308" width="2.0270%" height="15" fill="rgb(238,167,29)" fg:x="60" fg:w="3"/><text x="40.7905%" y="318.50">_..</text></g><g><title>_parsegen (email/feedparser.py:237) (1 samples, 0.68%)</title><rect x="42.5676%" y="308" width="0.6757%" height="15" fill="rgb(232,182,51)" fg:x="63" fg:w="1"/><text x="42.8176%" y="318.50"></text></g><g><title>_parse_headers (email/feedparser.py:473) (1 samples, 0.68%)</title><rect x="43.2432%" y="324" width="0.6757%" height="15" fill="rgb(231,60,39)" fg:x="64" fg:w="1"/><text x="43.4932%" y="334.50"></text></g><g><title>_parse_headers (email/feedparser.py:475) (1 samples, 0.68%)</title><rect x="43.9189%" y="324" width="0.6757%" height="15" fill="rgb(208,69,12)" fg:x="65" fg:w="1"/><text x="44.1689%" y="334.50"></text></g><g><title>_parse_headers (email/feedparser.py:477) (1 samples, 0.68%)</title><rect x="44.5946%" y="324" width="0.6757%" height="15" fill="rgb(235,93,37)" fg:x="66" fg:w="1"/><text x="44.8446%" y="334.50"></text></g><g><title>_parsegen (email/feedparser.py:240) (7 samples, 4.73%)</title><rect x="43.2432%" y="308" width="4.7297%" height="15" fill="rgb(213,116,39)" fg:x="64" fg:w="7"/><text x="43.4932%" y="318.50">_parse..</text></g><g><title>_parse_headers (email/feedparser.py:488) (4 samples, 2.70%)</title><rect x="45.2703%" y="324" width="2.7027%" height="15" fill="rgb(222,207,29)" fg:x="67" fg:w="4"/><text x="45.5203%" y="334.50">_p..</text></g><g><title>set_raw (email/message.py:484) (2 samples, 1.35%)</title><rect x="46.6216%" y="340" width="1.3514%" height="15" fill="rgb(206,96,30)" fg:x="69" fg:w="2"/><text x="46.8716%" y="350.50"></text></g><g><title>parse (email/parser.py:56) (16 samples, 10.81%)</title><rect x="37.8378%" y="260" width="10.8108%" height="15" fill="rgb(218,138,4)" fg:x="56" fg:w="16"/><text x="38.0878%" y="270.50">parse (email/par..</text></g><g><title>feed (email/feedparser.py:176) (13 samples, 8.78%)</title><rect x="39.8649%" y="276" width="8.7838%" height="15" fill="rgb(250,191,14)" fg:x="59" fg:w="13"/><text x="40.1149%" y="286.50">feed (email/..</text></g><g><title>_call_parse (email/feedparser.py:180) (13 samples, 8.78%)</title><rect x="39.8649%" y="292" width="8.7838%" height="15" fill="rgb(239,60,40)" fg:x="59" fg:w="13"/><text x="40.1149%" y="302.50">_call_parse ..</text></g><g><title>_parsegen (email/feedparser.py:295) (1 samples, 0.68%)</title><rect x="47.9730%" y="308" width="0.6757%" height="15" fill="rgb(206,27,48)" fg:x="71" fg:w="1"/><text x="48.2230%" y="318.50"></text></g><g><title>get_content_maintype (email/message.py:594) (1 samples, 0.68%)</title><rect x="47.9730%" y="324" width="0.6757%" height="15" fill="rgb(225,35,8)" fg:x="71" fg:w="1"/><text x="48.2230%" y="334.50"></text></g><g><title>get_content_type (email/message.py:578) (1 samples, 0.68%)</title><rect x="47.9730%" y="340" width="0.6757%" height="15" fill="rgb(250,213,24)" fg:x="71" fg:w="1"/><text x="48.2230%" y="350.50"></text></g><g><title>get (email/message.py:470) (1 samples, 0.68%)</title><rect x="47.9730%" y="356" width="0.6757%" height="15" fill="rgb(247,123,22)" fg:x="71" fg:w="1"/><text x="48.2230%" y="366.50"></text></g><g><title>close (email/feedparser.py:73) (1 samples, 0.68%)</title><rect x="48.6486%" y="292" width="0.6757%" height="15" fill="rgb(231,138,38)" fg:x="72" fg:w="1"/><text x="48.8986%" y="302.50"></text></g><g><title>pushlines (email/feedparser.py:123) (1 samples, 0.68%)</title><rect x="48.6486%" y="308" width="0.6757%" height="15" fill="rgb(231,145,46)" fg:x="72" fg:w="1"/><text x="48.8986%" y="318.50"></text></g><g><title>parse_request (http/server.py:342) (32 samples, 21.62%)</title><rect x="28.3784%" y="212" width="21.6216%" height="15" fill="rgb(251,118,11)" fg:x="42" fg:w="32"/><text x="28.6284%" y="222.50">parse_request (http/server.py:342)</text></g><g><title>parse_headers (http/client.py:236) (28 samples, 18.92%)</title><rect x="31.0811%" y="228" width="18.9189%" height="15" fill="rgb(217,147,25)" fg:x="46" fg:w="28"/><text x="31.3311%" y="238.50">parse_headers (http/client.py:..</text></g><g><title>parsestr (email/parser.py:67) (25 samples, 16.89%)</title><rect x="33.1081%" y="244" width="16.8919%" height="15" fill="rgb(247,81,37)" fg:x="49" fg:w="25"/><text x="33.3581%" y="254.50">parsestr (email/parser.py:..</text></g><g><title>parse (email/parser.py:57) (2 samples, 1.35%)</title><rect x="48.6486%" y="260" width="1.3514%" height="15" fill="rgb(209,12,38)" fg:x="72" fg:w="2"/><text x="48.8986%" y="270.50"></text></g><g><title>close (email/feedparser.py:186) (2 samples, 1.35%)</title><rect x="48.6486%" y="276" width="1.3514%" height="15" fill="rgb(227,1,9)" fg:x="72" fg:w="2"/><text x="48.8986%" y="286.50"></text></g><g><title>close (email/feedparser.py:76) (1 samples, 0.68%)</title><rect x="49.3243%" y="292" width="0.6757%" height="15" fill="rgb(248,47,43)" fg:x="73" fg:w="1"/><text x="49.5743%" y="302.50"></text></g><g><title>parse_request (http/server.py:359) (1 samples, 0.68%)</title><rect x="50.0000%" y="212" width="0.6757%" height="15" fill="rgb(221,10,30)" fg:x="74" fg:w="1"/><text x="50.2500%" y="222.50"></text></g><g><title>get (email/message.py:471) (1 samples, 0.68%)</title><rect x="50.0000%" y="228" width="0.6757%" height="15" fill="rgb(210,229,1)" fg:x="74" fg:w="1"/><text x="50.2500%" y="238.50"></text></g><g><title>header_fetch_parse (email/_policybase.py:316) (1 samples, 0.68%)</title><rect x="50.0000%" y="244" width="0.6757%" height="15" fill="rgb(222,148,37)" fg:x="74" fg:w="1"/><text x="50.2500%" y="254.50"></text></g><g><title>_sanitize_header (email/_policybase.py:284) (1 samples, 0.68%)</title><rect x="50.0000%" y="260" width="0.6757%" height="15" fill="rgb(234,67,33)" fg:x="74" fg:w="1"/><text x="50.2500%" y="270.50"></text></g><g><title>handle_one_request (http/server.py:410) (36 samples, 24.32%)</title><rect x="27.7027%" y="196" width="24.3243%" height="15" fill="rgb(247,98,35)" fg:x="41" fg:w="36"/><text x="27.9527%" y="206.50">handle_one_request (http/server.py:410)</text></g><g><title>parse_request (http/server.py:366) (2 samples, 1.35%)</title><rect x="50.6757%" y="212" width="1.3514%" height="15" fill="rgb(247,138,52)" fg:x="75" fg:w="2"/><text x="50.9257%" y="222.50"></text></g><g><title>get (email/message.py:469) (1 samples, 0.68%)</title><rect x="51.3514%" y="228" width="0.6757%" height="15" fill="rgb(213,79,30)" fg:x="76" fg:w="1"/><text x="51.6014%" y="238.50"></text></g><g><title>handle_one_request (http/server.py:413) (1 samples, 0.68%)</title><rect x="52.0270%" y="196" width="0.6757%" height="15" fill="rgb(246,177,23)" fg:x="77" fg:w="1"/><text x="52.2770%" y="206.50"></text></g><g><title>urlsplit (urllib/parse.py:478) (1 samples, 0.68%)</title><rect x="56.7568%" y="244" width="0.6757%" height="15" fill="rgb(230,62,27)" fg:x="84" fg:w="1"/><text x="57.0068%" y="254.50"></text></g><g><title>urlsplit (urllib/parse.py:497) (2 samples, 1.35%)</title><rect x="57.4324%" y="244" width="1.3514%" height="15" fill="rgb(216,154,8)" fg:x="85" fg:w="2"/><text x="57.6824%" y="254.50"></text></g><g><title>urlsplit (urllib/parse.py:500) (1 samples, 0.68%)</title><rect x="58.7838%" y="244" width="0.6757%" height="15" fill="rgb(244,35,45)" fg:x="87" fg:w="1"/><text x="59.0338%" y="254.50"></text></g><g><title>do_GET (server.py:13) (9 samples, 6.08%)</title><rect x="54.7297%" y="212" width="6.0811%" height="15" fill="rgb(251,115,12)" fg:x="81" fg:w="9"/><text x="54.9797%" y="222.50">do_GET (..</text></g><g><title>urlparse (urllib/parse.py:401) (7 samples, 4.73%)</title><rect x="56.0811%" y="228" width="4.7297%" height="15" fill="rgb(240,54,50)" fg:x="83" fg:w="7"/><text x="56.3311%" y="238.50">urlpar..</text></g><g><title>urlsplit (urllib/parse.py:502) (2 samples, 1.35%)</title><rect x="59.4595%" y="244" width="1.3514%" height="15" fill="rgb(233,84,52)" fg:x="88" fg:w="2"/><text x="59.7095%" y="254.50"></text></g><g><title>do_GET (server.py:14) (3 samples, 2.03%)</title><rect x="60.8108%" y="212" width="2.0270%" height="15" fill="rgb(207,117,47)" fg:x="90" fg:w="3"/><text x="61.0608%" y="222.50">d..</text></g><g><title>parse_qs (urllib/parse.py:715) (1 samples, 0.68%)</title><rect x="62.1622%" y="228" width="0.6757%" height="15" fill="rgb(249,43,39)" fg:x="92" fg:w="1"/><text x="62.4122%" y="238.50"></text></g><g><title>do_GET (server.py:19) (1 samples, 0.68%)</title><rect x="62.8378%" y="212" width="0.6757%" height="15" fill="rgb(209,38,44)" fg:x="93" fg:w="1"/><text x="63.0878%" y="222.50"></text></g><g><title>get (db.py:28) (1 samples, 0.68%)</title><rect x="62.8378%" y="228" width="0.6757%" height="15" fill="rgb(236,212,23)" fg:x="93" fg:w="1"/><text x="63.0878%" y="238.50"></text></g><g><title>log_message (http/server.py:583) (16 samples, 10.81%)</title><rect x="64.1892%" y="260" width="10.8108%" height="15" fill="rgb(242,79,21)" fg:x="95" fg:w="16"/><text x="64.4392%" y="270.50">log_message (htt..</text></g><g><title>log_date_time_string (http/server.py:601) (1 samples, 0.68%)</title><rect x="75.0000%" y="276" width="0.6757%" height="15" fill="rgb(211,96,35)" fg:x="111" fg:w="1"/><text x="75.2500%" y="286.50"></text></g><g><title>log_request (http/server.py:549) (19 samples, 12.84%)</title><rect x="63.5135%" y="244" width="12.8378%" height="15" fill="rgb(253,215,40)" fg:x="94" fg:w="19"/><text x="63.7635%" y="254.50">log_request (http/s..</text></g><g><title>log_message (http/server.py:585) (2 samples, 1.35%)</title><rect x="75.0000%" y="260" width="1.3514%" height="15" fill="rgb(211,81,21)" fg:x="111" fg:w="2"/><text x="75.2500%" y="270.50"></text></g><g><title>log_date_time_string (http/server.py:602) (1 samples, 0.68%)</title><rect x="75.6757%" y="276" width="0.6757%" height="15" fill="rgb(208,190,38)" fg:x="112" fg:w="1"/><text x="75.9257%" y="286.50"></text></g><g><title>send_response (http/server.py:497) (20 samples, 13.51%)</title><rect x="63.5135%" y="228" width="13.5135%" height="15" fill="rgb(235,213,38)" fg:x="94" fg:w="20"/><text x="63.7635%" y="238.50">send_response (http/..</text></g><g><title>log_request (http/server.py:550) (1 samples, 0.68%)</title><rect x="76.3514%" y="244" width="0.6757%" height="15" fill="rgb(237,122,38)" fg:x="113" fg:w="1"/><text x="76.6014%" y="254.50"></text></g><g><title>send_header (http/server.py:521) (1 samples, 0.68%)</title><rect x="77.0270%" y="244" width="0.6757%" height="15" fill="rgb(244,218,35)" fg:x="114" fg:w="1"/><text x="77.2770%" y="254.50"></text></g><g><title>send_response (http/server.py:499) (3 samples, 2.03%)</title><rect x="77.0270%" y="228" width="2.0270%" height="15" fill="rgb(240,68,47)" fg:x="114" fg:w="3"/><text x="77.2770%" y="238.50">s..</text></g><g><title>version_string (http/server.py:590) (2 samples, 1.35%)</title><rect x="77.7027%" y="244" width="1.3514%" height="15" fill="rgb(210,16,53)" fg:x="115" fg:w="2"/><text x="77.9527%" y="254.50"></text></g><g><title>formatdate (email/utils.py:147) (3 samples, 2.03%)</title><rect x="79.0541%" y="260" width="2.0270%" height="15" fill="rgb(235,124,12)" fg:x="117" fg:w="3"/><text x="79.3041%" y="270.50">f..</text></g><g><title>format_datetime (email/utils.py:162) (1 samples, 0.68%)</title><rect x="81.7568%" y="276" width="0.6757%" height="15" fill="rgb(224,169,11)" fg:x="121" fg:w="1"/><text x="82.0068%" y="286.50"></text></g><g><title>do_GET (server.py:22) (29 samples, 19.59%)</title><rect x="63.5135%" y="212" width="19.5946%" height="15" fill="rgb(250,166,2)" fg:x="94" fg:w="29"/><text x="63.7635%" y="222.50">do_GET (server.py:22)</text></g><g><title>send_response (http/server.py:500) (6 samples, 4.05%)</title><rect x="79.0541%" y="228" width="4.0541%" height="15" fill="rgb(242,216,29)" fg:x="117" fg:w="6"/><text x="79.3041%" y="238.50">send..</text></g><g><title>date_time_string (http/server.py:596) (6 samples, 4.05%)</title><rect x="79.0541%" y="244" width="4.0541%" height="15" fill="rgb(230,116,27)" fg:x="117" fg:w="6"/><text x="79.3041%" y="254.50">date..</text></g><g><title>formatdate (email/utils.py:153) (3 samples, 2.03%)</title><rect x="81.0811%" y="260" width="2.0270%" height="15" fill="rgb(228,99,48)" fg:x="120" fg:w="3"/><text x="81.3311%" y="270.50">f..</text></g><g><title>format_datetime (email/utils.py:171) (1 samples, 0.68%)</title><rect x="82.4324%" y="276" width="0.6757%" height="15" fill="rgb(253,11,6)" fg:x="122" fg:w="1"/><text x="82.6824%" y="286.50"></text></g><g><title>_format_timetuple_and_zone (email/utils.py:118) (1 samples, 0.68%)</title><rect x="82.4324%" y="292" width="0.6757%" height="15" fill="rgb(247,143,39)" fg:x="122" fg:w="1"/><text x="82.6824%" y="302.50"></text></g><g><title>__init__ (socketserver.py:747) (107 samples, 72.30%)</title><rect x="18.9189%" y="164" width="72.2973%" height="15" fill="rgb(236,97,10)" fg:x="28" fg:w="107"/><text x="19.1689%" y="174.50">__init__ (socketserver.py:747)</text></g><g><title>handle (http/server.py:432) (106 samples, 71.62%)</title><rect x="19.5946%" y="180" width="71.6216%" height="15" fill="rgb(233,208,19)" fg:x="29" fg:w="106"/><text x="19.8446%" y="190.50">handle (http/server.py:432)</text></g><g><title>handle_one_request (http/server.py:420) (57 samples, 38.51%)</title><rect x="52.7027%" y="196" width="38.5135%" height="15" fill="rgb(216,164,2)" fg:x="78" fg:w="57"/><text x="52.9527%" y="206.50">handle_one_request (http/server.py:420)</text></g><g><title>do_GET (server.py:24) (12 samples, 8.11%)</title><rect x="83.1081%" y="212" width="8.1081%" height="15" fill="rgb(220,129,5)" fg:x="123" fg:w="12"/><text x="83.3581%" y="222.50">do_GET (ser..</text></g><g><title>end_headers (http/server.py:534) (12 samples, 8.11%)</title><rect x="83.1081%" y="228" width="8.1081%" height="15" fill="rgb(242,17,10)" fg:x="123" fg:w="12"/><text x="83.3581%" y="238.50">end_headers..</text></g><g><title>flush_headers (http/server.py:538) (12 samples, 8.11%)</title><rect x="83.1081%" y="244" width="8.1081%" height="15" fill="rgb(242,107,0)" fg:x="123" fg:w="12"/><text x="83.3581%" y="254.50">flush_heade..</text></g><g><title>write (socketserver.py:826) (11 samples, 7.43%)</title><rect x="83.7838%" y="260" width="7.4324%" height="15" fill="rgb(251,28,31)" fg:x="124" fg:w="11"/><text x="84.0338%" y="270.50">write (soc..</text></g><g><title>finish (socketserver.py:804) (1 samples, 0.68%)</title><rect x="91.2162%" y="180" width="0.6757%" height="15" fill="rgb(233,223,10)" fg:x="135" fg:w="1"/><text x="91.4662%" y="190.50"></text></g><g><title>finish (socketserver.py:806) (1 samples, 0.68%)</title><rect x="91.8919%" y="180" width="0.6757%" height="15" fill="rgb(215,21,27)" fg:x="136" fg:w="1"/><text x="92.1419%" y="190.50"></text></g><g><title>process_request (socketserver.py:347) (115 samples, 77.70%)</title><rect x="15.5405%" y="132" width="77.7027%" height="15" fill="rgb(232,23,21)" fg:x="23" fg:w="115"/><text x="15.7905%" y="142.50">process_request (socketserver.py:347)</text></g><g><title>finish_request (socketserver.py:360) (115 samples, 77.70%)</title><rect x="15.5405%" y="148" width="77.7027%" height="15" fill="rgb(244,5,23)" fg:x="23" fg:w="115"/><text x="15.7905%" y="158.50">finish_request (socketserver.py:360)</text></g><g><title>__init__ (socketserver.py:749) (3 samples, 2.03%)</title><rect x="91.2162%" y="164" width="2.0270%" height="15" fill="rgb(226,81,46)" fg:x="135" fg:w="3"/><text x="91.4662%" y="174.50">_..</text></g><g><title>finish (socketserver.py:812) (1 samples, 0.68%)</title><rect x="92.5676%" y="180" width="0.6757%" height="15" fill="rgb(247,70,30)" fg:x="137" fg:w="1"/><text x="92.8176%" y="190.50"></text></g><g><title>close (socket.py:772) (1 samples, 0.68%)</title><rect x="92.5676%" y="196" width="0.6757%" height="15" fill="rgb(212,68,19)" fg:x="137" fg:w="1"/><text x="92.8176%" y="206.50"></text></g><g><title>shutdown_request (socketserver.py:506) (5 samples, 3.38%)</title><rect x="93.2432%" y="148" width="3.3784%" height="15" fill="rgb(240,187,13)" fg:x="138" fg:w="5"/><text x="93.4932%" y="158.50">shu..</text></g><g><title>all (148 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="148"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (server.py:55) (148 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="148"/><text x="0.2500%" y="78.50">&lt;module&gt; (server.py:55)</text></g><g><title>run_server (server.py:41) (148 samples, 100.00%)</title><rect x="0.0000%" y="84" width="100.0000%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="148"/><text x="0.2500%" y="94.50">run_server (server.py:41)</text></g><g><title>serve_forever (socketserver.py:237) (145 samples, 97.97%)</title><rect x="2.0270%" y="100" width="97.9730%" height="15" fill="rgb(247,173,49)" fg:x="3" fg:w="145"/><text x="2.2770%" y="110.50">serve_forever (socketserver.py:237)</text></g><g><title>_handle_request_noblock (socketserver.py:316) (126 samples, 85.14%)</title><rect x="14.8649%" y="116" width="85.1351%" height="15" fill="rgb(224,114,35)" fg:x="22" fg:w="126"/><text x="15.1149%" y="126.50">_handle_request_noblock (socketserver.py:316)</text></g><g><title>process_request (socketserver.py:348) (10 samples, 6.76%)</title><rect x="93.2432%" y="132" width="6.7568%" height="15" fill="rgb(245,159,27)" fg:x="138" fg:w="10"/><text x="93.4932%" y="142.50">process_r..</text></g><g><title>shutdown_request (socketserver.py:509) (5 samples, 3.38%)</title><rect x="96.6216%" y="148" width="3.3784%" height="15" fill="rgb(245,172,44)" fg:x="143" fg:w="5"/><text x="96.8716%" y="158.50">shu..</text></g><g><title>close_request (socketserver.py:513) (5 samples, 3.38%)</title><rect x="96.6216%" y="164" width="3.3784%" height="15" fill="rgb(236,23,11)" fg:x="143" fg:w="5"/><text x="96.8716%" y="174.50">clo..</text></g><g><title>close (socket.py:502) (5 samples, 3.38%)</title><rect x="96.6216%" y="180" width="3.3784%" height="15" fill="rgb(205,117,38)" fg:x="143" fg:w="5"/><text x="96.8716%" y="190.50">clo..</text></g><g><title>_real_close (socket.py:496) (5 samples, 3.38%)</title><rect x="96.6216%" y="196" width="3.3784%" height="15" fill="rgb(237,72,25)" fg:x="143" fg:w="5"/><text x="96.8716%" y="206.50">_re..</text></g></svg></svg>